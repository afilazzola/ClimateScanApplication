corrplot(intval2, method = "square")
intval2
str(intval2)
intval <- data.frame() ## empty row dataframe
for(i in 1:length(depts)){
dept.1 <- subset(df, department==depts[j], select=c("If","Then.simplified")) ## select risks from department "j"
dept.1 <- paste(dept.1$If,dept.1$Then.simplified) ## combine into 1 column
dept.i <- subset(df, department==depts[i], select=c("If","Then.simplified")) ## select risks from department "i"
dept.i <- paste(dept.i$If,dept.i$Then.simplified) ## combine into 1 column
val <- data.frame(dept=length(intersect(dept.1,dept.i))) ## count number of duplicates between two departments
rownames(val) <- paste(depts[i]) # attach department "i" name
intval <- rbind(intval,val) ## attach to empty dataframe
}
intval
str(intval)
colnames(intval) <- paste(depts[j])
intval
i
j
depts[i]
intval2 <- data.frame()
intval2 <- cbind.fill(intval2,intval)
intval2
str(intval2)
class(intval2)
class(intval)
intval2 <- data.frame()
intval2
intval2 <- cbind(intval2,intval)
intval2[,j] <- intval ## attach completed row into empty dataframe
intval2 <- data.frame()
intval2[,j] <- intval ## attach completed row into empty dataframe
intval
intval2
cbind.fill <- function(...){
nm <- list(...)
nm <- lapply(nm, as.matrix)
n <- max(sapply(nm, nrow))
do.call(cbind, lapply(nm, function (x)
rbind(x, matrix(, n-nrow(x), ncol(x)))))
}
intval2 <- cbind.fill(intval2,intval)
str(intval2)
class(intval2)
intval2[,j] <- intval ## attach completed row into empty dataframe
intval2 <- cbind.fill(intval2,intval)
class(intval2)
str(intval2)
intval2 <- data.frame()
intval2
intval
bind_cols(intval, intval2)
intval2 <- data.frame()
for(j in 1:length(depts)){
intval <- data.frame() ## empty row dataframe
for(i in 1:length(depts)){
dept.1 <- subset(df, department==depts[j], select=c("If","Then.simplified")) ## select risks from department "j"
dept.1 <- paste(dept.1$If,dept.1$Then.simplified) ## combine into 1 column
dept.i <- subset(df, department==depts[i], select=c("If","Then.simplified")) ## select risks from department "i"
dept.i <- paste(dept.i$If,dept.i$Then.simplified) ## combine into 1 column
val <- data.frame(dept=length(intersect(dept.1,dept.i))) ## count number of duplicates between two departments
rownames(val) <- paste(depts[i]) # attach department "i" name
intval <- rbind(intval,val) ## attach to empty dataframe
}
colnames(intval) <- paste(depts[j]) ##attach department "j" name
intval2 <- bind_cols(intval2, intval) ## attach completed row into empty dataframe
}
corrplot(intval2, method = "square")
str(intval2)
intval2 <- data.frame()
for(j in 1:length(depts)){
intval <- data.frame() ## empty row dataframe
for(i in 1:length(depts)){
dept.1 <- subset(df, department==depts[j], select=c("If","Then.simplified")) ## select risks from department "j"
dept.1 <- paste(dept.1$If,dept.1$Then.simplified) ## combine into 1 column
dept.i <- subset(df, department==depts[i], select=c("If","Then.simplified")) ## select risks from department "i"
dept.i <- paste(dept.i$If,dept.i$Then.simplified) ## combine into 1 column
val <- data.frame(dept=length(intersect(dept.1,dept.i))) ## count number of duplicates between two departments
rownames(val) <- paste(depts[i]) # attach department "i" name
intval <- rbind(intval,val) ## attach to empty dataframe
}
colnames(intval) <- paste(depts[j]) ##attach department "j" name
intval2 <- bind_cols(intval2, intval) ## attach completed row into empty dataframe
}
intval2
intval
intval2 <- bind_cols(intval2, intval)
bind_cols(intval2, intval)
intval2 <- combine(intval2, intval) ## attach completed row into empty dataframe
intval2 <- data.frame(ncol=26,nrow=26)
for(j in 1:length(depts)){
intval <- data.frame() ## empty row dataframe
for(i in 1:length(depts)){
dept.1 <- subset(df, department==depts[j], select=c("If","Then.simplified")) ## select risks from department "j"
dept.1 <- paste(dept.1$If,dept.1$Then.simplified) ## combine into 1 column
dept.i <- subset(df, department==depts[i], select=c("If","Then.simplified")) ## select risks from department "i"
dept.i <- paste(dept.i$If,dept.i$Then.simplified) ## combine into 1 column
val <- data.frame(dept=length(intersect(dept.1,dept.i))) ## count number of duplicates between two departments
rownames(val) <- paste(depts[i]) # attach department "i" name
intval <- rbind(intval,val) ## attach to empty dataframe
}
colnames(intval) <- paste(depts[j]) ##attach department "j" name
intval2 <- cbind(intval2, intval) ## attach completed row into empty dataframe
}
str(intval2)
corrplot(intval2, method = "square")
class(intval2)
intval2 <- data.frame(matrix(ncol=26,nrow=26))
for(j in 1:length(depts)){
intval <- data.frame() ## empty row dataframe
for(i in 1:length(depts)){
dept.1 <- subset(df, department==depts[j], select=c("If","Then.simplified")) ## select risks from department "j"
dept.1 <- paste(dept.1$If,dept.1$Then.simplified) ## combine into 1 column
dept.i <- subset(df, department==depts[i], select=c("If","Then.simplified")) ## select risks from department "i"
dept.i <- paste(dept.i$If,dept.i$Then.simplified) ## combine into 1 column
val <- data.frame(dept=length(intersect(dept.1,dept.i))) ## count number of duplicates between two departments
rownames(val) <- paste(depts[i]) # attach department "i" name
intval <- rbind(intval,val) ## attach to empty dataframe
}
colnames(intval) <- paste(depts[j]) ##attach department "j" name
intval2 <- cbind(intval2, intval) ## attach completed row into empty dataframe
}
str(intval2)
intval2 <- data.frame(matrix(ncol=26,nrow=26))
for(j in 1:length(depts)){
intval <- data.frame() ## empty row dataframe
for(i in 1:length(depts)){
dept.1 <- subset(df, department==depts[j], select=c("If","Then.simplified")) ## select risks from department "j"
dept.1 <- paste(dept.1$If,dept.1$Then.simplified) ## combine into 1 column
dept.i <- subset(df, department==depts[i], select=c("If","Then.simplified")) ## select risks from department "i"
dept.i <- paste(dept.i$If,dept.i$Then.simplified) ## combine into 1 column
val <- data.frame(dept=length(intersect(dept.1,dept.i))) ## count number of duplicates between two departments
rownames(val) <- paste(depts[i]) # attach department "i" name
intval <- rbind(intval,val) ## attach to empty dataframe
}
intval2[,j] <- intval ## attach completed row into empty dataframe
colnames(intval2)[j] <- paste(depts[j]) ##attach department "j" name
}
str(intval2)
corrplot(intval2, method = "square")
class(intval2)
str(intval2)
cor(intval2)
corrplot(cor(intval2), method = "square")
class(cor(intval2))
corrplot(matrix(intval2), method = "square")
matrix(intval2)
corrplot(intval2, method = "square")
class(intval2)
intval2
corrplot(as.matrix(intval2), method = "square")
as.matrix(intval2)
cordat <- gather(intval, dept1, dept2, 1:ncol(intval))
str(cordat)
library(reshape2)
cordata <- melt(intval2)
cordat
heat(cordat)
heat(cordata)
head(cordata)
cordat[,"dept"] <- rownames(intval2)
cordat
intval2[,"dept"] <- rownames(intval2)
intval2
intval2 <- data.frame(matrix(ncol=26,nrow=26))
for(j in 1:length(depts)){
intval <- data.frame() ## empty row dataframe
for(i in 1:length(depts)){
dept.1 <- subset(df, department==depts[j], select=c("If","Then.simplified")) ## select risks from department "j"
dept.1 <- paste(dept.1$If,dept.1$Then.simplified) ## combine into 1 column
dept.i <- subset(df, department==depts[i], select=c("If","Then.simplified")) ## select risks from department "i"
dept.i <- paste(dept.i$If,dept.i$Then.simplified) ## combine into 1 column
val <- data.frame(dept=length(intersect(dept.1,dept.i))) ## count number of duplicates between two departments
rownames(val) <- paste(depts[i]) # attach department "i" name
intval <- rbind(intval,val) ## attach to empty dataframe
}
intval2[,j] <- intval ## attach completed row into empty dataframe
colnames(intval2)[j] <- paste(depts[j]) ##attach department "j" name
}
str(intval2)
intval2
intval2[,"dept"] <- colnames(intval2)
intval2
cordata <- gather(intval2, dept, value, 1:ncol(intval2)-1)
cordata <- gather(intval2, dept, value, 1:(ncol(intval2)-1))
cordata
str(cordata)
26*26
26**26
26**2
intval2 <- data.frame(matrix(ncol=26,nrow=26))
for(j in 1:length(depts)){
intval <- data.frame() ## empty row dataframe
for(i in 1:length(depts)){
dept.1 <- subset(df, department==depts[j], select=c("If","Then.simplified")) ## select risks from department "j"
dept.1 <- paste(dept.1$If,dept.1$Then.simplified) ## combine into 1 column
dept.i <- subset(df, department==depts[i], select=c("If","Then.simplified")) ## select risks from department "i"
dept.i <- paste(dept.i$If,dept.i$Then.simplified) ## combine into 1 column
val <- data.frame(dept=length(intersect(dept.1,dept.i))) ## count number of duplicates between two departments
rownames(val) <- paste(depts[i]) # attach department "i" name
intval <- rbind(intval,val) ## attach to empty dataframe
}
intval2[,j] <- intval ## attach completed row into empty dataframe
colnames(intval2)[j] <- paste(depts[j]) ##attach department "j" name
}
intval2[,"dept1"] <- colnames(intval2)
cordata <- gather(intval2, dept2, value, 1:(ncol(intval2)-1))
ggplot(data = cordata, aes(x=dept1, y=dept2, fill=value)) +
geom_tile()
depts <- unique(df$Division.combined)
intval2 <- data.frame(matrix(ncol=26,nrow=26))
for(j in 1:length(depts)){
intval <- data.frame() ## empty row dataframe
for(i in 1:length(depts)){
dept.1 <- subset(df, department==depts[j], select=c("If","Then.simplified")) ## select risks from department "j"
dept.1 <- paste(dept.1$If,dept.1$Then.simplified) ## combine into 1 column
dept.i <- subset(df, department==depts[i], select=c("If","Then.simplified")) ## select risks from department "i"
dept.i <- paste(dept.i$If,dept.i$Then.simplified) ## combine into 1 column
val <- data.frame(dept=length(intersect(dept.1,dept.i))) ## count number of duplicates between two departments
rownames(val) <- paste(depts[i]) # attach department "i" name
intval <- rbind(intval,val) ## attach to empty dataframe
}
intval2[,j] <- intval ## attach completed row into empty dataframe
colnames(intval2)[j] <- paste(depts[j]) ##attach department "j" name
}
length(depts)
depts <- unique(df$Division.combined)
## empty data frames to load correlation values into
intval2 <- data.frame(matrix(ncol=length(depts),nrow=length(depts)))
for(j in 1:length(depts)){
intval <- data.frame() ## empty row dataframe
for(i in 1:length(depts)){
dept.1 <- subset(df, department==depts[j], select=c("If","Then.simplified")) ## select risks from department "j"
dept.1 <- paste(dept.1$If,dept.1$Then.simplified) ## combine into 1 column
dept.i <- subset(df, department==depts[i], select=c("If","Then.simplified")) ## select risks from department "i"
dept.i <- paste(dept.i$If,dept.i$Then.simplified) ## combine into 1 column
val <- data.frame(dept=length(intersect(dept.1,dept.i))) ## count number of duplicates between two departments
rownames(val) <- paste(depts[i]) # attach department "i" name
intval <- rbind(intval,val) ## attach to empty dataframe
}
intval2[,j] <- intval ## attach completed row into empty dataframe
colnames(intval2)[j] <- paste(depts[j]) ##attach department "j" name
}
intval2[,"dept1"] <- colnames(intval2)
cordata <- gather(intval2, dept2, value, 1:(ncol(intval2)-1))
ggplot(data = cordata, aes(x=dept1, y=dept2, fill=value)) +
geom_tile()
cordata
max(cordata$value)
intval2
depts <- unique(df$Division.combined)
## empty data frames to load correlation values into
intval2 <- data.frame(matrix(ncol=length(depts),nrow=length(depts)))
for(j in 1:length(depts)){
intval <- data.frame() ## empty row dataframe
for(i in 1:length(depts)){
dept.1 <- subset(df, Division.combined==depts[j], select=c("If","Then.simplified")) ## select risks from department "j"
dept.1 <- paste(dept.1$If,dept.1$Then.simplified) ## combine into 1 column
dept.i <- subset(df, Division.combined==depts[i], select=c("If","Then.simplified")) ## select risks from department "i"
dept.i <- paste(dept.i$If,dept.i$Then.simplified) ## combine into 1 column
val <- data.frame(dept=length(intersect(dept.1,dept.i))) ## count number of duplicates between two departments
rownames(val) <- paste(depts[i]) # attach department "i" name
intval <- rbind(intval,val) ## attach to empty dataframe
}
intval2[,j] <- intval ## attach completed row into empty dataframe
colnames(intval2)[j] <- paste(depts[j]) ##attach department "j" name
}
intval2[,"dept1"] <- colnames(intval2)
cordata <- gather(intval2, dept2, value, 1:(ncol(intval2)-1))
ggplot(data = cordata, aes(x=dept1, y=dept2, fill=value)) +
geom_tile()
ggplot(data = cordata, aes(x=dept1, y=dept2, fill=value)) +
geom_tile()+
scale_fill_gradient(low = "white", high = "red")
plot(data = cordata, aes(x=dept1, y=dept2, fill=value)) +
geom_tile()+
scale_fill_gradient(low = "white", high = "red") + ylab("") + xlab("")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data = cordata, aes(x=dept1, y=dept2, fill=value)) +
geom_tile()+
scale_fill_gradient(low = "white", high = "red") + ylab("") + xlab("")
ggplot(data = cordata, aes(x=dept1, y=dept2, fill=value)) +
geom_tile()+
scale_fill_gradient(low = "white", high = "red") + ylab("") + xlab("")+ theme(axis.text.x = element_text(angle = 90, hjust = 1))
cordata
=======
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?downloadHandler
foxie
runApp()
library(rsconnect)
deployApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
filedata
runApp()
runApp()
runApp()
runApp()
?downloadhander
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?downloadButton
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
?downloadHandler
runApp()
runApp()
runApp()
runApp()
paste0("ClimScan", Sys.Date(), ".csv", sep="")
runApp()
shiny::runApp()
downloadHandler
runApp()
runApp()
runApp()
library(rsconnect)
deployApp()
runApp()
devtools::install_github('hadley/ggplot2')
library(rsconnect)
deployApp()
options(shiny.fullstacktrace = TRUE)
runApp()
runApp()
runApp()
deployApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
deployApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
>>>>>>> 0759f57132b334decfa7efb50614d41d9b261c73
runApp()
## -----
## global.R
## -----
## UI
library(shiny)
library(markdown)
library(tidyverse)
library(plotly)
library(shinythemes)
library(shinycssloaders)
library(tools)
## Server
library(vegan)
library(tidytext)
library(stringr)
library(wordcloud)
source("riskcalculations.r")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install_github("hadley/ggplot2")
install.packages('devtools')
library(devtools)
install_github("hadley/scales", force=TRUE)
library(Rtools)
install_github("hadley/ggplot2")
install.packages(c("RColorBrewer", "stringr", "dichromat", "munsell", "plyr", "colorspace"))
install.packages(c("RColorBrewer", "stringr", "dichromat", "munsell", "plyr", "colorspace"))
install_github("hadley/scales", force=TRUE)
library(devtools)
install.packages("devtools")
library(devtools)
install_github("hadley/scales", force=TRUE)
install_github("hadley/ggplot2")
shiny::runApp()
library(ggplot2)
dev_mode(FALSE)
library(ggplot2)
install_github("hadley/ggplot2")
install.packages("ggplopt2")
install.packages("ggplot2")
runApp()
install.packages("tidyverse")
install.packages("tidyverse")
shiny::runApp()
runApp()
library(devtools)
dev_mode(on=T)
install_github("hadley/ggplot2")
dev_mode(on=F)
install.packages("rlang")
install.packages("rlang")
devtools::install_github("tidyverse/ggplot2")
shiny::runApp()
df.in <- risk.calc("test.csv")
library(tidyverse)
dept.options <- as.vector(unique(df.in$Department))
climate.div <- df.in  %>% group_by(If,Department) %>% summarize(freq.risk=length(Future.risk.quant))  ## counts number of risks
climate.div <- data.frame(climate.div) ## puts it into a traditional data frame
df.in[,"Future.risk.quant"] <- df.in[,"sum.future.quant"]
climate.div <- df.in  %>% group_by(If,division) %>% summarize(freq.risk=length(Future.risk.quant))  ## counts number of risks
climate.div <- data.frame(climate.div) ## puts it into a traditional data frame
df.in[,"Future.risk.quant"] <- df.in[,"sum.future.quant"]
climate.div <- df.in  %>% group_by(If,Department) %>% summarize(freq.risk=length(Future.risk.quant))  ## counts number of risks
climate.div <- data.frame(climate.div) ## puts it into a traditional data frame
c
climate.div <- subset(climate.div, Department==department[1])
climate.div <- subset(climate.div, Department==df.in$department[1])
climate.div
climate.div <- subset(climate.div, Department==df.in$Department[1])
climate.div
climate.div <- df.in  %>% group_by(If,Department) %>% summarize(freq.risk=length(Future.risk.quant))  ## counts number of risks
climate.div <- data.frame(climate.div) ## puts it into a traditional data frame
climate.div <- subset(climate.div, Department==df.in$Department[1])
climate.div
ymax <- max(dept.clim$freq.risk)+2
## Plots the risks identifed within each Department
ggplot(dept.clim, aes(x=If, y=freq.risk))+geom_bar(stat="identity") + coord_flip() + ylab("number of risks") + xlab("")+
## improve plot look
theme_bw(base_size = 16)+scale_y_continuous(expand = c(0, 0), limits=c(0,ymax))  +theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
## Counts number of risks
climate.div <- df.in  %>% group_by(If,Department) %>% summarize(freq.risk=length(Future.risk.quant))
climate.div <- data.frame(climate.div) ## puts it into a traditional data frame
dept.clim <- subset(climate.div, Department==df.in$Department[1])
ymax <- max(dept.clim$freq.risk)+2
## Plots the risks identifed within each Department
ggplot(dept.clim, aes(x=If, y=freq.risk))+geom_bar(stat="identity") + coord_flip() + ylab("number of risks") + xlab("")+
## improve plot look
theme_bw(base_size = 16)+scale_y_continuous(expand = c(0, 0), limits=c(0,ymax))  +theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
consequence <- df.in  %>% filter(Department==df.in$Damage.Property.Technology[1]) %>%
consequence <- df.in  %>% filter(Department==df.in$Department[1]) %>%
gather(consequence, value, Financial:Critical.Infra) %>% group_by(consequence) %>%  ## extract columns for consequences and identify as groups
summarize(avg=mean(value))
consequence
ggplot(consequence, aes(x=consequence, y=avg))+geom_bar(stat="identity") + coord_flip() + ylab("average consequence ranking") + xlab("")+
## improve plot look
theme_bw(base_size = 16)+scale_y_continuous(expand = c(0, 0), limits=c(0,5))  +theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
runApp()
rsconnect::setAccountInfo(name='afilazzola',
token='E8B8D2CF92CD8A078262FB2B9E16DED1',
secret='<SECRET>')
rsconnect::setAccountInfo(name='afilazzola',
token='E8B8D2CF92CD8A078262FB2B9E16DED1',
secret='S5HU5ktWMgknvcbwufDSRP5TMV3WnEB/Xzs/SpnK')
runApp()
